// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// ntsc_sync //
// --------- //

#define ntsc_sync_wrap_target 1
#define ntsc_sync_wrap 20

static const uint16_t ntsc_sync_program_instructions[] = {
    0x60c0, //  0: out    isr, 32                    
            //     .wrap_target
    0xf800, //  1: set    pins, 0                [24]
    0xe101, //  2: set    pins, 1                [1] 
    0xf800, //  3: set    pins, 0                [24]
    0xe101, //  4: set    pins, 1                [1] 
    0xf600, //  5: set    pins, 0                [22]
    0xe035, //  6: set    x, 21                      
    0xa046, //  7: mov    y, isr                     
    0xe101, //  8: set    pins, 1                [1] 
    0xe100, //  9: set    pins, 0                [1] 
    0xf701, // 10: set    pins, 1                [23]
    0x0049, // 11: jmp    x--, 9                     
    0xe100, // 12: set    pins, 0                [1] 
    0xe301, // 13: set    pins, 1                [3] 
    0xc000, // 14: irq    nowait 0                   
    0xb242, // 15: nop                           [18]
    0x008c, // 16: jmp    y--, 12                    
    0xe03d, // 17: set    x, 29                      
    0xe100, // 18: set    pins, 0                [1] 
    0xf701, // 19: set    pins, 1                [23]
    0x0052, // 20: jmp    x--, 18                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ntsc_sync_program = {
    .instructions = ntsc_sync_program_instructions,
    .length = 21,
    .origin = -1,
};

static inline pio_sm_config ntsc_sync_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ntsc_sync_wrap_target, offset + ntsc_sync_wrap);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, 
//   and configures the SM to output on a particular pin
void ntsc_sync_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, pin);
   pio_gpio_init(pio, pin+1);
   //
   pio_sm_set_out_pins (pio, sm, pin, 2) ;
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true); 
   //
   pio_sm_config c = ntsc_sync_program_get_default_config(offset);
   //
   // Using 'out' and 'set' 
   sm_config_set_set_pins(&c, pin, 2);
   //
   // JMP pin is specified separately as GPIO #, GPIO 4
   // sm_config_set_jmp_pin (&c, 4) ;
   //
   // the out FIFO, shift right,  autopull, threshold 31
   sm_config_set_out_shift (&c, true, true, 31) ;
   pio_sm_init(pio, sm, offset, &c);
}

#endif

// --------- //
// ntsc_data //
// --------- //

#define ntsc_data_wrap_target 0
#define ntsc_data_wrap 6

static const uint16_t ntsc_data_program_instructions[] = {
            //     .wrap_target
    0x20c0, //  0: wait   1 irq, 0                   
    0xe03f, //  1: set    x, 31                      
    0x80a0, //  2: pull   block                      
    0x7404, //  3: out    pins, 4                [20]
    0x00e3, //  4: jmp    !osre, 3                   
    0x0042, //  5: jmp    x--, 2                     
    0xe000, //  6: set    pins, 0                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ntsc_data_program = {
    .instructions = ntsc_data_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config ntsc_data_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ntsc_data_wrap_target, offset + ntsc_data_wrap);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, 
//   and configures the SM to output on a particular pin
void ntsc_data_program_init(PIO pio, uint sm, uint offset, uint pin) {
   //pio_gpio_init(pio, pin);
   pio_gpio_init(pio, pin+1);
   pio_gpio_init(pio, pin+2);
   pio_gpio_init(pio, pin+3);
   pio_gpio_init(pio, pin+4);
   //
   pio_sm_set_out_pins (pio, sm, pin+1, 4) ;
   pio_sm_set_set_pins (pio, sm, pin+1, 4) ;
   pio_sm_set_consecutive_pindirs(pio, sm, pin+1, 4, true); 
   //
   pio_sm_config c = ntsc_data_program_get_default_config(offset);
   //
   // Using 'out' and 'set' 
   sm_config_set_out_pins(&c, pin+1, 4);
   sm_config_set_set_pins(&c, pin+1, 4);
   //
   // JMP pin is specified separately as GPIO #, GPIO 4
   // sm_config_set_jmp_pin (&c, 4) ;
   //
   // the out FIFO, shift right, no autopull, threshold 31
    sm_config_set_out_shift (&c, false, false, 32) ;
	// and join to make 8 entries
	sm_config_set_fifo_join (&c, PIO_FIFO_JOIN_TX) ;
   pio_sm_init(pio, sm, offset, &c);
}

#endif
