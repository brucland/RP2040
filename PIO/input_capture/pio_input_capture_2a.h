// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// capture //
// ------- //

#define capture_wrap_target 2
#define capture_wrap 7

static const uint16_t capture_program_instructions[] = {
    0xe03f, //  0: set    x, 31                      
    0xa031, //  1: mov    x, ::x                     
            //     .wrap_target
    0x00c4, //  2: jmp    pin, 4                     
    0x0042, //  3: jmp    x--, 2                     
    0x4020, //  4: in     x, 32                      
    0x00c7, //  5: jmp    pin, 7                     
    0x0002, //  6: jmp    2                          
    0x0045, //  7: jmp    x--, 5                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program capture_program = {
    .instructions = capture_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config capture_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + capture_wrap_target, offset + capture_wrap);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, 
//   and configures the SM to output on a particular pin
void capture_program_init(PIO pio, uint sm, uint offset, uint pin) {
   // No OUTPUT pins
   //pio_gpio_init(pio, pin);
   // the jump pin
   pio_gpio_init(pio, 4); 
   //pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true); //no output
   pio_sm_config c = capture_program_get_default_config(offset);
   // Using 'out' NOT 'set' in modified program
   //sm_config_set_out_pins(&c, pin, 1);
   // no output
   //sm_config_set_set_pins(&c, pin, 1);
   // JMP pin is specified separately as GPIO #, GPIO 4
   sm_config_set_jmp_pin (&c, 4) ;
   // no output FIFO from core0, all input to core0
   sm_config_set_fifo_join (&c, PIO_FIFO_JOIN_RX) ;
   // autopush the isr to eliminate one istrcution
   sm_config_set_in_shift (&c, true, true, 1) ; 
   pio_sm_init(pio, sm, offset, &c);
}

#endif
